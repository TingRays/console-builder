<?php

namespace App\Interfaces\Abnermouke\Console;

use Abnermouke\ConsoleBuilder\Builders\Form\ConsoleFormBuilder;
use Abnermouke\ConsoleBuilder\Builders\Form\Items\BasicItemBuilder;
use Abnermouke\ConsoleBuilder\Builders\Form\Tools\FormButtonBuilder;
use Abnermouke\ConsoleBuilder\Builders\Form\Tools\FormItemsBuilder;
use Abnermouke\ConsoleBuilder\Builders\Table\Tools\TableContentBuilder;
use Abnermouke\EasyBuilder\Library\CodeLibrary;
use Abnermouke\EasyBuilder\Library\Cryptography\AesLibrary;
use Abnermouke\EasyBuilder\Module\BaseService;
use App\Model\Abnermouke\Console\HelpDocs;
use App\Repository\Abnermouke\Console\HelpDocRepository;
use App\Services\Abnermouke\Console\AdminLogService;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;

/**
 * 帮助文档接口服务容器
 * Class HelpDocInterfaceService
 * @package App\Interfaces\Abnermouke\Console
 */
class HelpDocInterfaceService extends BaseService
{
    /**
     * 获取列表
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-04 00:30:03
     * @param $request
     * @return array|bool
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     * @throws \Exception
     */
    public function lists($request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //整理查询条件
        $conditions = $sort_rules = $lists = [];
        //判断筛选条件
        if ($filters = data_get($data, 'filters', [])) {
            //循环筛选条件
            foreach ($filters as $filter => $value) {
                //根据筛选项设置条件
                switch ($filter) {
                    case '__keyword__':
                        $value && $conditions[implode('|', ['title', 'alias', 'content'])] = ['like', '%'.$value.'%'];
                        break;
                    case 'type':
                        (int)$value > 0 && $conditions['type'] = (int)$value;
                        break;
                    case 'created_at':
                        $value && $conditions['created_at'] = ['between', $value];
                        break;
                    case 'updated_at':
                        $value && $conditions['updated_at'] = ['between', $value];
                        break;
                }
            }
        }
        //判断排序方式
        switch (data_get($data, 'sort_alias')) {
            case 'recently_created':
                //最新创建
                $sort_rules['created_at'] = 'desc';
                break;
            case 'recently_updated':
                //最近更新
                $sort_rules['updated_at'] = 'desc';
                break;
            default:
                //默认排序
                $sort_rules['id'] = 'desc';
                break;
        }
        //获取列表
        $lists = (new HelpDocRepository())->lists($conditions, [], [], $sort_rules, '', (int)data_get($data, 'page', config('console_builder.table.default_page')), (int)data_get($data, 'page_size', config('console_builder.table.default_page_size')));
        //查询列表
        if ($lists && !empty($lists['lists'])) {
            //循环列表
            foreach ($lists['lists'] as $k => $list) {
                //设置信息
                $lists['lists'][$k]['description'] = string_to_text($list['content'], 200);
            }
        }
        //获取结果
        $render = (new TableContentBuilder($data))->setLists($lists)->render();
        //返回结果
        return $this->success($render);
    }

    /**
     * 获取详情
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-04 00:34:41
     * @param $doc_id
     * @param $request
     * @return array|bool
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function detail($doc_id, $request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //获取结果
        $html = ($builder = (new ConsoleFormBuilder()))
            ->setTitle('帮助文档')
            ->submit($builder->buildButton()->title('确认提交')->ajax(route('abnermouke.console.help.docs.store', ['id' => (int)$doc_id]), 'post', FormButtonBuilder::AJAX_AFTER_REFRESH_TABLE))
            ->setItems(function () use ($doc_id) {
                return ($formItemBuilder = (new FormItemsBuilder()))
                    ->addItem($formItemBuilder->buildInput('title', '文档标题')->required())
                    ->addItem($formItemBuilder->buildInput('alias', '文档标识')->description('文档标识可用于快速检索，请尽量保持其唯一性')->required())
                    ->addItem($formItemBuilder->buildSelect('type', '文档类型')->options(HelpDocs::TYPE_GROUPS['type'])->required()->value_type(BasicItemBuilder::VALUE_TYPE_OF_INTEGRAL))
                    ->addItem($formItemBuilder->buildEditor('content', '文档内容')->required());
            })
            ->setData((int)$doc_id > 0 ? (new HelpDocRepository())->row(['id' => (int)$doc_id]) : [])
            ->bindTable(data_get($data, 'bind_table_id', ''), data_get($data, 'bind_modal_id', ''))
            ->render();
        //返回成功
        return $this->success(compact('html'));
    }

    /**
     * 保存信息
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-04 00:36:53
     * @param $doc_id
     * @param $request
     * @return array|bool
     * @throws \Exception
     */
    public function store($doc_id, $request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING,'非法参数');
        }
        //判断更改项
        if (!($edited = $data['__edited__'])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '信息无更新');
        }
        //获取更改项
        $info = Arr::only($data['__data__'], $data['__edited__']);
        //添加修改时间
        $info['updated_at'] = auto_datetime();
        //判断是否为新增
        if ((int)$doc_id <= 0) {
            //添加默认信息
            $info['created_at'] = auto_datetime();
            //添加信息
            if (!$doc_id = (new HelpDocRepository())->insertGetId($info)) {
                //返回失败
                return $this->fail(CodeLibrary::DATA_UPDATE_FAIL, '信息创建失败');
            }
            //添加日志
            (new AdminLogService())->record('新增帮助文档成功', compact('doc_id'));
        } else {
            //修改信息
            if (!(new HelpDocRepository())->update(['id' => (int)$doc_id], $info)) {
                //返回失败
                return $this->fail(CodeLibrary::DATA_UPDATE_FAIL, '修改失败');
            }
            //添加日志
            (new AdminLogService())->record('编辑帮助文档成功', array_merge(compact('doc_id'), $info));
        }
        //返回成功
        return $this->success(compact('doc_id'));
    }

    /**
     * 删除信息
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-04 00:41:06
     * @param $request
     * @return array|bool
     * @throws \Exception
     */
    public function delete($request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //获取ID
        $ids = data_get($data, 'id', '');
        //判断类型
        $ids = is_string($ids) ? explode(',', $ids) : $ids;
        //删除信息
        if (!(new HelpDocRepository())->delete(['id' => ['in', $ids]])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_DELETE_FAIL, '网络错误，删除失败');
        }
        //添加日志
        (new AdminLogService())->record('删除帮助文档', compact('ids'));
        //返回成功
        return $this->success($ids);
    }
}
