<?php

namespace App\Interfaces\Abnermouke\Console;

use Abnermouke\ConsoleBuilder\Builders\Table\Tools\TableContentBuilder;
use Abnermouke\EasyBuilder\Library\CodeLibrary;
use Abnermouke\EasyBuilder\Library\Cryptography\AesLibrary;
use Abnermouke\EasyBuilder\Module\BaseService;
use App\Handler\Cache\Data\Abnermouke\Console\ConfigCacheHandler;
use App\Repository\Abnermouke\Console\ConfigRepository;
use App\Repository\Abnermouke\Console\SmsLogRepository;
use App\Services\Abnermouke\Console\AdminLogService;

/**
 * 短信记录逻辑服务容器
 * Class SmsLogInterfaceService
 * @package App\Interfaces\Abnermouke\Console
 */
class SmsLogInterfaceService extends BaseService
{

    /**
     * 获取列表
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-04 00:30:03
     * @param $request
     * @return array|bool
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     * @throws \Exception
     */
    public function lists($request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //整理查询条件
        $conditions = $sort_rules = $lists = [];
        //判断筛选条件
        if ($filters = data_get($data, 'filters', [])) {
            //循环筛选条件
            foreach ($filters as $filter => $value) {
                //根据筛选项设置条件
                switch ($filter) {
                    case '__keyword__':
                        $value && $conditions[implode('|', ['gateway', 'mobile', 'sign_name', 'template_id', 'content'])] = ['like', '%'.$value.'%'];
                        break;
                    case 'created_at':
                        $value && $conditions['created_at'] = ['between', $value];
                        break;
                    case 'updated_at':
                        $value && $conditions['updated_at'] = ['between', $value];
                        break;
                }
            }
        }
        //判断排序方式
        switch (data_get($data, 'sort_alias')) {
            case 'recently_created':
                //最新创建
                $sort_rules['created_at'] = 'desc';
                break;
            case 'recently_updated':
                //最近更新
                $sort_rules['updated_at'] = 'desc';
                break;
            default:
                //默认排序
                $sort_rules['id'] = 'desc';
                break;
        }
        //获取列表
        $lists = (new SmsLogRepository())->lists($conditions, [], [], $sort_rules, '', (int)data_get($data, 'page', config('console_builder.table.default_page')), (int)data_get($data, 'page_size', config('console_builder.table.default_page_size')));
        //获取结果
        $render = (new TableContentBuilder($data))->setLists($lists)->render();
        //返回结果
        return $this->success($render);
    }


    /**
     * 保存阿里云短信服务配置
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-04 01:26:10
     * @param $request
     * @return array|bool
     * @throws \Exception
     */
    public function store($request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING,'非法参数');
        }
        //判断更改项
        if (!($edited = $data['__edited__'])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '信息无更新');
        }
        //更新配置
        if (!(new ConfigRepository())->update(['alias' => 'SMS_ALI_PARAMS'], ['content' => object_2_array($data['__data__']) ,'updated_at' => auto_datetime()])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_UPDATE_FAIL, '配置失败');
        }
        //刷新缓存
        (new ConfigCacheHandler())->refresh();
        //添加日志
        (new AdminLogService())->record('配置阿里云短信服务参数', $data['__data__']);
        //返回成功
        return $this->success(compact('edited'));
    }

}
