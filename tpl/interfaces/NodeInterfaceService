<?php

namespace App\Interfaces\Abnermouke\Console;

use Abnermouke\EasyBuilder\Library\CodeLibrary;
use Abnermouke\EasyBuilder\Library\Cryptography\AesLibrary;
use Abnermouke\EasyBuilder\Module\BaseService;
use App\Handler\Cache\Data\Abnermouke\Console\RoleCacheHandler;
use App\Model\Abnermouke\Console\Roles;
use App\Repository\Abnermouke\Console\NodeRepository;
use App\Repository\Abnermouke\Console\RoleRepository;
use App\Services\Abnermouke\Console\AdminLogService;

/**
 * 管理员权限节点逻辑服务容器
 * Class NodeInterfaceService
 * @package App\Interfaces\Abnermouke\Console
 */
class NodeInterfaceService extends BaseService
{

    /**
     * 获取节点信息
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-02 14:11:54
     * @param $role_id
     * @return array|bool
     * @throws \Exception
     */
    public function nodes($role_id)
    {
        //根据分组名分组节点信息
        $nodes = (new NodeRepository())->get([], ['alias', 'method', 'route_name', 'guard_name', 'action', 'group_name'], [], ['created_at' => 'asc']);
        //整理信息
        $groups = $aliases = [];
        //循环节点信息
        foreach ($nodes as $k => $node) {
            //判断是否存在分组
            if (!isset($groups[$node['group_name']])) {
                //设置默认分组
                $groups[$node['group_name']] = [];
            }
            //判断节点名称
            if (!in_array($node['group_name'], ['首页', '上传'])) {
                //替换名称信息
                $node['guard_name'] = str_replace($node['group_name'], '', $node['guard_name']);
            }
            //判断节点是否必须存在
            if (!in_array($node['alias'], config('console_builder.nodes.default_node_aliases', []))) {
                //添加节点
                $groups[$node['group_name']][$node['alias']] = $node['guard_name'];
            }
            //添加节点标识
            $aliases[] = $node['alias'];
            //释放内存
            unset($nodes[$k]);
        }
        //查询当前角色
        $role = (new RoleRepository())->row(['id' => (int)$role_id], ['id', 'guard_name', 'alias', 'is_full_permission', 'is_locked', 'permission_nodes', 'admin_count']);
        //判断是否不为满权限
        if ((int)$role['is_full_permission'] === Roles::SWITCH_OFF) {
            //设置节点信息
            $aliases = object_2_array($role['permission_nodes']);
        }
        //返回信息
        return $this->success(compact('groups', 'aliases', 'role'));
    }

    /**
     * 保存权限节点
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-02 15:06:32
     * @param $role_id
     * @param $request
     * @return array|bool
     * @throws \Exception
     */
    public function store($role_id, $request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING,'非法参数');
        }
        //判断更改项
        if (!($edited = $data['__edited__'])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '信息无更新');
        }
        //更新权限节点
        if (!(new RoleRepository())->update(['id' => (int)$role_id], ['permission_nodes' => ($permission_nodes = object_2_array(data_get($data, '__data__.aliases', []))), 'updated_at' => auto_datetime()])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_UPDATE_FAIL, '配置失败');
        }
        //刷新角色权限节点缓存
        (new RoleCacheHandler($role_id))->refresh();
        //记录日志
        (new AdminLogService())->record('配置权限节点', compact('role_id', 'permission_nodes'));
        //返回成功
        return $this->success(compact('permission_nodes'));
    }


}
