<?php


namespace App\Interfaces\Abnermouke\Console;


use Abnermouke\ConsoleBuilder\Builders\Form\ConsoleFormBuilder;
use Abnermouke\ConsoleBuilder\Builders\Form\Tools\FormButtonBuilder;
use Abnermouke\ConsoleBuilder\Builders\Form\Tools\FormItemsBuilder;
use Abnermouke\ConsoleBuilder\Builders\Table\Tools\TableContentBuilder;
use Abnermouke\EasyBuilder\Library\CodeLibrary;
use Abnermouke\EasyBuilder\Library\Cryptography\AesLibrary;
use Abnermouke\EasyBuilder\Module\BaseService;
use App\Model\Abnermouke\Console\Roles;
use App\Repository\Abnermouke\Console\AdminRepository;
use App\Repository\Abnermouke\Console\RoleRepository;
use App\Services\Abnermouke\Console\AdminLogService;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;

/**
 * 权限角色逻辑服务容器
 * Class RoleInterfaceService
 * @package App\Interfaces\Abnermouke\Console
 */
class RoleInterfaceService extends BaseService
{
    /**
     * 获取列表
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-02 13:07:01
     * @param $request Request
     * @return array|bool
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function lists($request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //整理查询条件
        $conditions = $sort_rules = $lists = [];
        //判断筛选条件
        if ($filters = data_get($data, 'filters', [])) {
            //循环筛选条件
            foreach ($filters as $filter => $value) {
                //根据筛选项设置条件
                switch ($filter) {
                    case '__keyword__':
                        $value && $conditions[implode('|', ['guard_name', 'alias'])] = ['like', '%'.$value.'%'];
                        break;
                    case 'is_locked':
                        (int)$value > 0 && $conditions['is_locked'] = (int)$value;
                        break;
                    case 'is_full_permission':
                        (int)$value > 0 && $conditions['is_full_permission'] = (int)$value;
                        break;
                    case 'created_at':
                        $value && $conditions['created_at'] = ['between', $value];
                        break;
                    case 'updated_at':
                        $value && $conditions['updated_at'] = ['between', $value];
                        break;
                }
            }
        }
        //判断排序方式
        switch (data_get($data, 'sort_alias')) {
            case 'recently_created':
                //最新创建
                $sort_rules['created_at'] = 'desc';
                break;
            case 'recently_updated':
                //最近更新
                $sort_rules['updated_at'] = 'desc';
                break;
            default:
                //默认排序
                $sort_rules['id'] = 'desc';
                break;
        }
        //获取列表
        $lists = (new RoleRepository())->lists($conditions, [], [], $sort_rules, '', (int)data_get($data, 'page', config('console_builder.table.default_page')), (int)data_get($data, 'page_size', config('console_builder.table.default_page_size')));
        //查询列表
        if ($lists && !empty($lists['lists'])) {
            //循环列表
            foreach ($lists['lists'] as $k => $list) {
                //查询列表
                if ($avatars = (new AdminRepository())->get(['role_id' => (int)$list['id']], ['nickname', 'avatar'])) {
                    //循环信息
                    foreach ($avatars as $kk => $avatar) {
                        //设置信息
                        $avatars[$kk] = !empty($avatar['avatar']) ? $avatar['avatar'] : $avatar['nickname'];
                    }
                }
                //设置信息
                $lists['lists'][$k]['avatars'] = object_2_array($avatars);
            }
        }
        //获取结果
        $render = (new TableContentBuilder($data))->setLists($lists)->render();
        //返回结果
        return $this->success($render);
    }

    /**
     * 管理员信息详情
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-02 13:28:42
     * @param $role_id
     * @param $request
     * @return array|bool
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function detail($role_id, $request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //获取结果
        $html = ($builder = (new ConsoleFormBuilder()))
            ->setTitle('管理员角色信息')
            ->submit($builder->buildButton()->title('确认提交')->ajax(route('abnermouke.console.admins.roles.store', ['id' => (int)$role_id]), 'post', FormButtonBuilder::AJAX_AFTER_REFRESH_TABLE))
            ->setItems(function () use ($role_id) {
                return ($formItemBuilder = (new FormItemsBuilder()))
                    ->addItem($formItemBuilder->buildInput('guard_name', '角色名称')->required())
                    ->addItem($formItemBuilder->buildInput('alias', '角色标识')->description('角色标识需唯一，生成成功后将不支持修改，请确认后输入')->readonly((int)$role_id <= 0 ? false : true)->required())
                    ->addItem($formItemBuilder->buildSwitch('is_locked', '是否锁定')->description('角色锁定后除满权限账户，其他账户不可删除')->allow_text(''))
                    ->addItem($formItemBuilder->buildSwitch('is_full_permission', '是否满权限')->description('满权限角色无需配置任何权限即可使用后台所有功能，并可删除锁定角色')->allow_text(''));
            })
            ->setData((int)$role_id > 0 ? (new RoleRepository())->row(['id' => (int)$role_id]) : [])
            ->bindTable(data_get($data, 'bind_table_id', ''), data_get($data, 'bind_modal_id', ''))
            ->render();
        //返回成功
        return $this->success(compact('html'));
    }

    /**
     * 保存信息
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-02 13:33:37
     * @param $role_id
     * @param $request
     * @return array|bool
     * @throws \Exception
     */
    public function store($role_id, $request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING,'非法参数');
        }
        //判断更改项
        if (!($edited = $data['__edited__'])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '信息无更新');
        }
        //获取更改项
        $info = Arr::only($data['__data__'], $data['__edited__']);
        //添加修改时间
        $info['updated_at'] = auto_datetime();
        //判断是否为新增
        if ((int)$role_id <= 0) {
            //判断标识是否可用
            if ((new RoleRepository())->exists(['alias' => $info['alias']])) {
                //返回失败
                return $this->fail(CodeLibrary::DATA_CREATE_FAIL, '角色标识已被占用，请更改');
            }
            //添加信息
            $info['permission_nodes'] = [];
            $info['created_at'] = auto_datetime();
            //添加信息
            if (!$role_id = (new RoleRepository())->insertGetId($info)) {
                //返回失败
                return $this->fail(CodeLibrary::DATA_UPDATE_FAIL, '信息创建失败');
            }
            //添加日志
            (new AdminLogService())->record('新增管理员角色信息成功', compact('role_id'));
        } else {
            //修改信息
            if (!(new RoleRepository())->update(['id' => (int)$role_id], $info)) {
                //返回失败
                return $this->fail(CodeLibrary::DATA_UPDATE_FAIL, '修改失败');
            }
            //添加日志
            (new AdminLogService())->record('编辑管理员角色信息成功', array_merge(compact('role_id'), $info));
        }
        //返回成功
        return $this->success(compact('role_id'));
    }

    /**
     * 删除管理员角色
     * @Author Abnermouke <abnermouke@outlook.com>
     * @Originate in Abnermouke's MBP
     * @Time 2022-04-02 13:20:25
     * @param $request Request
     * @return array|bool
     * @throws \Exception
     */
    public function delete($request)
    {
        //获取加密信息
        if (!$data = AesLibrary::decryptFormData($request->all())) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_MISSING, '非法参数');
        }
        //获取ID
        $ids = data_get($data, 'id', '');
        //判断类型
        $ids = is_string($ids) ? explode(',', $ids) : $ids;
        //判断是否不可删除
        if ($role_names = (new RoleRepository())->pluck('guard_name', ['id' => ['in', $ids], 'admin_count' => ['>', 0]])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_EXISTS, implode(', ', $role_names).'绑定管理员未清空');
        }
        //判断是否满权限
        if ((int)current_auth('role_full_permission', config('console_builder.session_prefix')) !== Roles::SWITCH_ON && ($role_names = (new RoleRepository())->pluck('guard_name', ['id' => ['in', $ids], 'admin_count' => ['>', 0], 'is_locked' => Roles::SWITCH_ON]))) {
            //返回失败
            return $this->fail(CodeLibrary::WITH_DO_NOT_ALLOW_STATE, implode(', ', $role_names).'已锁定，您的权限不可删除');
        }
        //删除角色信息
        if (!(new RoleRepository())->delete(['id' => ['in', $ids]])) {
            //返回失败
            return $this->fail(CodeLibrary::DATA_DELETE_FAIL, '网络错误，删除失败');
        }
        //添加日志
        (new AdminLogService())->record('删除管理员角色', compact('ids'));
        //返回成功
        return $this->success($ids);
    }


}
